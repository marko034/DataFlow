/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 6
 * Example: 3
 * Summary:
 *        Kernel that doubles values in a vector.
 */
package vectors;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class VectorsKernel extends Kernel {

	VectorsKernel(KernelParameters parameters, int vectorSize) {
		super(parameters);

        double a = Math.sqrt(vectorSize);
        int b = (int) Math.round(a);

		DFEVectorType<DFEVar> vectorType =
			new DFEVectorType<DFEVar>(dfeUInt(32), b);

		// Input
		DFEVector<DFEVar> inRow = io.input("inVector1", vectorType);
		DFEVector<DFEVar> inColumn = io.input("inVector2", vectorType);
		
		
		//DFEVar x = io.input("x", dfeUInt(32));
		//DFEVar.int resultValue = 0;
		//resultValue = 0;
		// Output
		
		
		/*for (int i = 0; i < Math.sqrt(vectorSize); i++) {
    		resultValue = resultValue + inrRow[i]*inColumn[i];
    	}*/
    	
    	DFEVector<DFEVar> resultVector = vectorType.newInstance(this);
    	
    	/*for (int i=0; i<Math.sqrt(vectorSize); i++){
    	    resultVector[i] = 0;
    	}*/

        for (int i = 0; i < Math.sqrt(vectorSize); i++) {
            resultVector[i] <== resultVector[i] + inRow[i]*inColumn[i];
        }
            
        io.output("outValue", resultVector, vectorType);
    	
    	//io.output("outValue", resultValue, dfeUInt(32));
		
		/*DFEVector<DFEVar> inMatrix2 = io.input("inVector2", vectorType);
		DFEVector<DFEVar> inMatrix3 = io.input("inVector3", vectorType);*/
		
		/*DFEVector<DFEVar> resultMatrix = vectorType.newInstance(this);
		
		for(int i=0; i<Math.sqrt(vectorSize);i++){
		    for(int j=0; j<Math.sqrt(vectorSize);j++){
		        DFEVar temp = 0;
		        for(int k=0;k<Math.sqrt(vectorSize);k++){
		            temp = temp + inMatrix1[i*Math.sqrt(vectorSize)+k]*inMatrix2[k*Math.sqrt(vectorSize)+j];
		            
		        }
		        resultMatrix[i*Math.sqrt(vectorSize)+j]=temp;
		        //doubledVector[elem]=result;
		    }
		}*/

		// Explicitly double each vector element
	/*	DFEVector<DFEVar> doubledVector =
			vectorType.newInstance(this);

		for (int i = 0; i < vectorSize; i++)
			doubledVector[i] <== inVector[i] * 2;

		// Double vector by multiplying with another
		// (constant) vector [2, 2].
		DFEVector<DFEVar> quadroupledVector =
			doubledVector * constant.vect(2, 2);

		// Double vector by multiplying all elements by a single value
		DFEVector<DFEVar> octupledVector =
			quadroupledVector * 2;*/

		//Output
		//io.output("outValue", resultValue, vectorType);
		//io.output("outVector2", inMatrix2, vectorType);
		
	}

}
